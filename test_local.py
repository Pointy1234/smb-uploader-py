#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç SMB File Processor
"""

import os
import requests
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_health_endpoint():
    """–¢–µ—Å—Ç health endpoint"""
    try:
        response = requests.get('http://localhost:3000/health', timeout=5)
        if response.status_code == 200:
            print("‚úÖ Health endpoint: OK")
            print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
            return True
        else:
            print(f"‚ùå Health endpoint: HTTP {response.status_code}")
            return False
    except requests.RequestException as e:
        print(f"‚ùå Health endpoint: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
        return False

def test_process_endpoint():
    """–¢–µ—Å—Ç process endpoint"""
    try:
        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤...")
        response = requests.get('http://localhost:3000/process', timeout=30)
        
        if response.status_code == 200:
            print("‚úÖ Process endpoint: OK")
            print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
            return True
        else:
            print(f"‚ùå Process endpoint: HTTP {response.status_code}")
            print(f"   –û—à–∏–±–∫–∞: {response.text}")
            return False
    except requests.RequestException as e:
        print(f"‚ùå Process endpoint: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
        return False

def main():
    print("üß™ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMB File Processor")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['SMB_HOST', 'SMB_SHARE', 'API_URL']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("   –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        return False
    
    print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   SMB_HOST: {os.getenv('SMB_HOST')}")
    print(f"   SMB_SHARE: {os.getenv('SMB_SHARE')}")
    print(f"   API_URL: {os.getenv('API_URL')}")
    print()
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...")
    max_attempts = 10
    
    for attempt in range(max_attempts):
        if test_health_endpoint():
            break
        time.sleep(2)
        print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}...")
    else:
        print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è")
        return False
    
    print()
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
    success = test_process_endpoint()
    
    print()
    if success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
    
    return success

if __name__ == '__main__':
    main()
