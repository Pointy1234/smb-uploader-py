#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SMB —Ñ–∞–π–ª–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä - Python –≤–µ—Ä—Å–∏—è
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ SMB —à–∞—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –Ω–∞ API endpoint
"""

import os
import base64
import logging
import tempfile
from pathlib import Path
from typing import List, Optional
import threading
import time

from flask import Flask, jsonify, request
from smbprotocol.connection import Connection, Dialects
from smbprotocol.session import Session
from smbprotocol.tree import TreeConnect
from smbprotocol.open import Open, CreateDisposition, CreateOptions, FileAccessMask, ShareAccess
from smbprotocol.file_info import FileInformationClass
from smbprotocol.exceptions import SMBResponseException
import requests
from dotenv import load_dotenv
import uuid

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SMB_HOST = os.getenv('SMB_HOST')
SMB_SHARE = os.getenv('SMB_SHARE')
SMB_USERNAME = os.getenv('SMB_USERNAME')
SMB_PASSWORD = os.getenv('SMB_PASSWORD')
SMB_DOMAIN = os.getenv('SMB_DOMAIN', 'WORKGROUP')
API_URL = os.getenv('API_URL')
PORT = int(os.getenv('PORT', 3000))
SMB_INPUT_DIR = os.getenv('SMB_INPUT_DIR', 'input')
SMB_OUTPUT_DIR = os.getenv('SMB_OUTPUT_DIR', 'output')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
if not all([SMB_HOST, SMB_SHARE, API_URL]):
    logger.error('–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env')
    exit(1)

logger.info(' –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:')
logger.info(f' SMB_HOST: {SMB_HOST}')
logger.info(f' SMB_SHARE: {SMB_SHARE}')
logger.info(f' SMB_USERNAME: {SMB_USERNAME or "(–Ω–µ –∑–∞–¥–∞–Ω)"}')
logger.info(f' API_URL: {API_URL}')
logger.info(f' PORT: {PORT}')
logger.info(f' INPUT DIR: {SMB_INPUT_DIR}')
logger.info(f' OUTPUT DIR: {SMB_OUTPUT_DIR}')

app = Flask(__name__)

class SMBClient:
    """SMB3 –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏"""
    
    def __init__(self):
        self.server_name = SMB_HOST
        self.share_name = SMB_SHARE
        self.username = SMB_USERNAME
        self.password = SMB_PASSWORD
        self.domain = SMB_DOMAIN
        self.connection = None
        self.session = None
        self.tree = None
        self.connected = False
        
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMB3 —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SMB3
            self.connection = Connection(
                uuid.uuid4(), 
                self.server_name, 
                445,
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SMB3 –¥–∏–∞–ª–µ–∫—Ç—ã
                dialects=[Dialects.SMB_3_0_0, Dialects.SMB_3_0_2, Dialects.SMB_3_1_1]
            )
            self.connection.connect()
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
            self.session = Session(
                self.connection, 
                self.username, 
                self.password, 
                self.domain,
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è SMB3
                require_signing=True
            )
            self.session.connect()
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —à–∞—Ä–µ
            tree_path = f"\\\\{self.server_name}\\{self.share_name}"
            self.tree = TreeConnect(self.session, tree_path)
            self.tree.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SMB3
            dialect_version = self.connection.dialect
            logger.info(f'‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SMB3: {tree_path}')
            logger.info(f'üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–∏–∞–ª–µ–∫—Ç: {dialect_version}')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ SMB3
            if dialect_version in [Dialects.SMB_3_0_0, Dialects.SMB_3_0_2, Dialects.SMB_3_1_1]:
                logger.info('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SMB3 –ø—Ä–æ—Ç–æ–∫–æ–ª–∞')
                self.connected = True
                return True
            else:
                logger.error(f'‚ùå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –¥–∏–∞–ª–µ–∫—Ç: {dialect_version}')
                self.disconnect()
                return False
            
        except Exception as e:
            logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMB3: {e}')
            self.connected = False
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç SMB —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if self.tree:
                self.tree.disconnect()
            if self.session:
                self.session.disconnect()
            if self.connection:
                self.connection.disconnect()
            self.connected = False
            logger.info('‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç SMB3 —Å–µ—Ä–≤–µ—Ä–∞')
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç SMB3: {e}')
    
    def list_files(self, directory: str = '') -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            if not self.connected:
                raise Exception("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMB3")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_path = directory.replace('/', '\\').strip('\\') if directory else ""
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —á—Ç–µ–Ω–∏—è
            file_open = Open(self.tree, search_path)
            file_open.create(
                CreateDisposition.FILE_OPEN,
                FileAccessMask.GENERIC_READ,
                CreateOptions.FILE_DIRECTORY_FILE,
                share_access=ShareAccess.FILE_SHARE_READ | ShareAccess.FILE_SHARE_WRITE
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            files_info = file_open.query_directory("*", FileInformationClass.FILE_DIRECTORY_INFORMATION)
            
            files = []
            for file_info in files_info:
                if file_info.file_name not in ['.', '..']:
                    files.append(file_info.file_name)
            
            file_open.close()
            return files
            
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ {directory}: {e}')
            return []
    
    def read_file(self, file_path: str) -> Optional[bytes]:
        """–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            if not self.connected:
                raise Exception("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMB3")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
            clean_path = file_path.replace('/', '\\').strip('\\')
            
            file_open = Open(self.tree, clean_path)
            file_open.create(
                CreateDisposition.FILE_OPEN,
                FileAccessMask.GENERIC_READ,
                share_access=ShareAccess.FILE_SHARE_READ
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_info = file_open.query_info(FileInformationClass.FILE_STANDARD_INFORMATION)
            file_size = file_info.end_of_file
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            data = file_open.read(0, file_size)
            file_open.close()
            
            return data
            
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}')
            return None
    
    def write_file(self, file_path: str, data: bytes) -> bool:
        """–ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞"""
        try:
            if not self.connected:
                raise Exception("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMB3")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
            clean_path = file_path.replace('/', '\\').strip('\\')
            
            file_open = Open(self.tree, clean_path)
            file_open.create(
                CreateDisposition.FILE_OVERWRITE_IF,  # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
                FileAccessMask.GENERIC_WRITE,
                share_access=ShareAccess.FILE_SHARE_READ
            )
            
            file_open.write(data, 0)
            file_open.close()
            
            return True
            
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}')
            return False
    
    def delete_file(self, file_path: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            if not self.connected:
                raise Exception("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMB3")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
            clean_path = file_path.replace('/', '\\').strip('\\')
            
            file_open = Open(self.tree, clean_path)
            file_open.create(
                CreateDisposition.FILE_OPEN,
                FileAccessMask.DELETE,
                share_access=ShareAccess.FILE_SHARE_DELETE
            )
            
            # –ü–æ–º–µ—á–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            file_open.set_info({"delete_pending": True})
            file_open.close()
            
            return True
            
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}')
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π SMB –∫–ª–∏–µ–Ω—Ç
smb_client = SMBClient()

def initialize_smb():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SMB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    try:
        success = smb_client.connect()
        if success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            root_files = smb_client.list_files('')
            logger.info(f' –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏/—Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ SMB: {root_files}')
        return success
    except Exception as e:
        logger.error(f' –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMB-—à–∞—Ä–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}')
        logger.error(f' –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ \\\\{SMB_HOST}\\{SMB_SHARE}')
        return False

def is_image_file(filename: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    image_extensions = {'.png', '.jpg', '.jpeg', '.gif', '.bmp', '.tiff', '.webp'}
    return Path(filename).suffix.lower() in image_extensions

def process_files():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    logger.info('[PROCESS] –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ SMB')
    
    input_path = SMB_INPUT_DIR
    output_path = SMB_OUTPUT_DIR
    
    try:
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
        test_file = f"{input_path}\\.__smb_test__.txt"
        test_data = b'test'
        
        logger.info(f'[PROCESS] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏: —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ {test_file}')
        if smb_client.write_file(test_file, test_data):
            logger.info('[PROCESS] –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω')
            
            logger.info(f'[PROCESS] –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ {test_file}')
            if smb_client.delete_file(test_file):
                logger.info('[PROCESS] –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω')
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        logger.info(f'[PROCESS] –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ {input_path}')
        files = smb_client.list_files(input_path)
        logger.info(f'[PROCESS] –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}')
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_files = [f for f in files if is_image_file(f)]
        
        if not image_files:
            logger.info(' –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
            return {'message': '–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'}
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for file in image_files:
            full_path = f"{input_path}\\{file}"
            output_full_path = f"{output_path}\\{file}"
            
            logger.info(f'[PROCESS] –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {full_path}')
            buffer = smb_client.read_file(full_path)
            
            if not buffer:
                logger.error(f'[PROCESS] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file}')
                continue
            
            logger.info(f'[PROCESS] –§–∞–π–ª {file} –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä {len(buffer)} –±–∞–π—Ç')
            
            # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ base64
            base64_data = base64.b64encode(buffer).decode('utf-8')
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ API
            logger.info(f'[PROCESS] –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {file} –Ω–∞ API –≤ JSON...')
            try:
                response = requests.post(
                    API_URL,
                    json={
                        'filename': file,
                        'filedata': base64_data
                    },
                    headers={'Content-Type': 'application/json'},
                    timeout=10
                )
                response.raise_for_status()
                logger.info(f'[PROCESS] –§–∞–π–ª {file} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ API')
            except requests.RequestException as e:
                logger.error(f'[PROCESS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file}: {e}')
                continue
            
            # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            logger.info(f'[PROCESS] –ü–µ—Ä–µ–Ω–æ—Å —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫—É output: {file}')
            try:
                if smb_client.write_file(output_full_path, buffer):
                    if smb_client.delete_file(full_path):
                        logger.info(f'[PROCESS] –§–∞–π–ª {file} –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ output')
                    else:
                        logger.error(f'[PROCESS] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file}')
                else:
                    logger.error(f'[PROCESS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {file} –≤ output')
            except Exception as e:
                logger.error(f'[PROCESS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ —Ñ–∞–π–ª–∞ {file}: {e}')
        
        return {'message': '–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ output'}
        
    except Exception as error:
        logger.error(f'[PROCESS] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {error}')
        raise error

@app.route('/process', methods=['GET'])
def process_endpoint():
    """Endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    try:
        result = process_files()
        return jsonify(result)
    except Exception as e:
        logger.error(f'[PROCESS] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}')
        return jsonify({'error': str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({'status': 'healthy', 'timestamp': '2025-06-25 02:26:44'})

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SMB –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    initialize_smb()
    
    logger.info(f' –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:{PORT}')
    app.run(host='0.0.0.0', port=PORT, debug=False)
