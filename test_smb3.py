#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç SMB3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMB3 —Å–µ—Ä–≤–µ—Ä—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import os
import sys
from dotenv import load_dotenv
from smbprotocol.connection import Connection, Dialects
from smbprotocol.session import Session
from smbprotocol.tree import TreeConnect
from smbprotocol.open import Open, CreateDisposition, CreateOptions, FileAccessMask
import uuid

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_smb3_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMB3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    SMB_HOST = os.getenv('SMB_HOST')
    SMB_SHARE = os.getenv('SMB_SHARE')
    SMB_USERNAME = os.getenv('SMB_USERNAME')
    SMB_PASSWORD = os.getenv('SMB_PASSWORD')
    SMB_DOMAIN = os.getenv('SMB_DOMAIN', 'WORKGROUP')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not all([SMB_HOST, SMB_SHARE]):
        print("‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SMB3 –≤ .env")
        print("   –ù–µ–æ–±—Ö–æ–¥–∏–º—ã: SMB_HOST, SMB_SHARE")
        return False
    
    print("üß™ –¢–µ—Å—Ç SMB3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("=" * 40)
    print(f"üñ•Ô∏è  –°–µ—Ä–≤–µ—Ä: {SMB_HOST}")
    print(f"üìÅ –®–∞—Ä–∞: {SMB_SHARE}")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {SMB_USERNAME or '(–∞–Ω–æ–Ω–∏–º–Ω—ã–π)'}")
    print(f"üè¢ –î–æ–º–µ–Ω: {SMB_DOMAIN}")
    print()
    
    connection = None
    session = None
    tree = None
    
    try:
        print("üîå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMB3 —Å–µ—Ä–≤–µ—Ä—É...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SMB3
        connection = Connection(
            uuid.uuid4(), 
            SMB_HOST, 
            445,
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SMB3 –¥–∏–∞–ª–µ–∫—Ç—ã
            dialects=[Dialects.SMB_3_0_0, Dialects.SMB_3_0_2, Dialects.SMB_3_1_1]
        )
        connection.connect()
        print("‚úÖ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ª–µ–∫—Ç
        dialect_version = connection.dialect
        print(f"üì° –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ª–µ–∫—Ç: {dialect_version}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ SMB3
        if dialect_version not in [Dialects.SMB_3_0_0, Dialects.SMB_3_0_2, Dialects.SMB_3_1_1]:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SMB3! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {dialect_version}")
            return False
        
        print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SMB3 –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
        
        print("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        session = Session(
            connection, 
            SMB_USERNAME, 
            SMB_PASSWORD, 
            SMB_DOMAIN,
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è SMB3
            require_signing=True
        )
        session.connect()
        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        
        print("üìÇ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —à–∞—Ä–µ...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —à–∞—Ä–µ
        tree_path = f"\\\\{SMB_HOST}\\{SMB_SHARE}"
        tree = TreeConnect(session, tree_path)
        tree.connect()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —à–∞—Ä–µ {tree_path} —É—Å–ø–µ—à–Ω–æ")
        
        print("üìã –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        try:
            file_open = Open(tree, "")
            file_open.create(
                CreateDisposition.FILE_OPEN,
                FileAccessMask.GENERIC_READ,
                CreateOptions.FILE_DIRECTORY_FILE
            )
            
            files_info = file_open.query_directory("*")
            files = [f.file_name for f in files_info if f.file_name not in ['.', '..']]
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫: {len(files)}")
            if files:
                print("üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
                for file in files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    print(f"   - {file}")
                if len(files) > 10:
                    print(f"   ... –∏ –µ—â–µ {len(files) - 10} —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫")
            
            file_open.close()
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        
        print("‚úèÔ∏è  –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            test_file = ".__smb3_test__.txt"
            test_data = b"SMB3 test file"
            
            file_open = Open(tree, test_file)
            file_open.create(
                CreateDisposition.FILE_OVERWRITE_IF,
                FileAccessMask.GENERIC_WRITE
            )
            
            file_open.write(test_data, 0)
            file_open.close()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            file_open = Open(tree, test_file)
            file_open.create(
                CreateDisposition.FILE_OPEN,
                FileAccessMask.DELETE
            )
            file_open.set_info({"delete_pending": True})
            file_open.close()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/—É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {e}")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å")
        
        print()
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã SMB3 –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("   SMB3 File Processor –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —ç—Ç–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMB3: {e}")
        print()
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞: ping {SMB_HOST}")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMB3 –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        print("   3. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è")
        print("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —à–∞—Ä—É")
        print("   5. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ firewall –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç 445")
        return False
        
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try:
            if tree:
                tree.disconnect()
            if session:
                session.disconnect()
            if connection:
                connection.disconnect()
        except:
            pass

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("SMB3 Connection Tester")
    print("–í–µ—Ä—Å–∏—è 1.0 –¥–ª—è SMB3 File Processor")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
    if not os.path.exists('.env'):
        print("‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        print("   cp .env.example .env")
        return False
    
    success = test_smb3_connection()
    
    if success:
        print()
        print("‚úÖ SMB3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print()
        print("‚ùå SMB3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º SMB3 File Processor")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
