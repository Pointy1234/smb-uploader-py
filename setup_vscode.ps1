# PowerShell —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VS Code –¥–ª—è SMB3 File Processor

param(
    [switch]$CreateWorkspace = $false,
    [switch]$InstallExtensions = $false
)

Write-Host "üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VS Code –¥–ª—è SMB3 File Processor" -ForegroundColor Green
Write-Host "===============================================" -ForegroundColor Cyan

# –ü—Ä–æ–≤–µ—Ä–∫–∞ VS Code
if (-not (Get-Command code -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå VS Code –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH!" -ForegroundColor Red
    Write-Host "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VS Code –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ PATH, –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–∑ –ø–∞–ø–∫–∏ VS Code" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ VS Code –Ω–∞–π–¥–µ–Ω" -ForegroundColor Green

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ .vscode
$vscodeDir = ".vscode"
if (-not (Test-Path $vscodeDir)) {
    New-Item -ItemType Directory -Force -Path $vscodeDir | Out-Null
    Write-Host "üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è .vscode" -ForegroundColor Cyan
}

# –°–æ–∑–¥–∞–Ω–∏–µ launch.json (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏)
Write-Host "üêõ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏..." -ForegroundColor Yellow

$launchConfig = @'
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "üöÄ SMB3 File Processor",
            "type": "python",
            "request": "launch",
            "program": "app.py",
            "console": "integratedTerminal",
            "env": {
                "FLASK_ENV": "development",
                "FLASK_DEBUG": "1"
            },
            "args": [],
            "python": "python"
        },
        {
            "name": "üß™ Test SMB3 Connection",
            "type": "python",
            "request": "launch",
            "program": "test_smb3.py",
            "console": "integratedTerminal",
            "python": "python"
        },
        {
            "name": "üîç Test Local API",
            "type": "python",
            "request": "launch",
            "program": "test_local.py",
            "console": "integratedTerminal",
            "python": "python"
        },
        {
            "name": "üì¶ Prepare Offline",
            "type": "python",
            "request": "launch",
            "program": "prepare_offline.py",
            "console": "integratedTerminal",
            "python": "python"
        }
    ]
}
'@

$launchConfig | Out-File -FilePath (Join-Path $vscodeDir "launch.json") -Encoding UTF8

# –°–æ–∑–¥–∞–Ω–∏–µ tasks.json (–∑–∞–¥–∞—á–∏)
Write-Host "‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á VS Code..." -ForegroundColor Yellow

$tasksConfig = @'
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "üöÄ Start SMB3 Processor",
            "type": "shell",
            "command": "python",
            "args": ["app.py"],
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new",
                "showReuseMessage": true,
                "clear": false
            },
            "problemMatcher": []
        },
        {
            "label": "üß™ Test SMB3 Connection",
            "type": "shell",
            "command": "python",
            "args": ["test_smb3.py"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            }
        },
        {
            "label": "üîç Test API Endpoints",
            "type": "shell",
            "command": "python",
            "args": ["test_local.py"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            }
        },
        {
            "label": "üê≥ Docker Compose Up",
            "type": "shell",
            "command": "docker-compose",
            "args": ["up", "--build", "-d"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new"
            }
        },
        {
            "label": "üê≥ Docker Compose Up (Offline)",
            "type": "shell",
            "command": "docker-compose",
            "args": ["-f", "docker-compose.offline.yml", "up", "--build", "-d"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new"
            }
        },
        {
            "label": "üõë Docker Compose Down",
            "type": "shell",
            "command": "docker-compose",
            "args": ["down"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new"
            }
        },
        {
            "label": "üìä Docker Logs",
            "type": "shell",
            "command": "docker-compose",
            "args": ["logs", "-f", "smb-processor"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            }
        },
        {
            "label": "üì¶ Install Dependencies",
            "type": "shell",
            "command": "pip",
            "args": ["install", "-r", "requirements.txt"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new"
            }
        },
        {
            "label": "üìã Setup Environment",
            "type": "shell",
            "command": "powershell",
            "args": ["-Command", "Copy-Item .env.example .env; notepad .env"],
            "group": "build",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": false,
                "panel": "new"
            }
        },
        {
            "label": "üè• Health Check",
            "type": "shell",
            "command": "powershell",
            "args": ["-Command", "Invoke-RestMethod http://localhost:3000/health"],
            "group": "test",
            "presentation": {
                "echo": true,
                "reveal": "always",
                "focus": true,
                "panel": "new"
            }
        }
    ]
}
'@

$tasksConfig | Out-File -FilePath (Join-Path $vscodeDir "tasks.json") -Encoding UTF8

# –°–æ–∑–¥–∞–Ω–∏–µ settings.json (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
Write-Host "‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ VS Code..." -ForegroundColor Yellow

$settingsConfig = @'
{
    "python.defaultInterpreterPath": "python",
    "python.terminal.activateEnvironment": true,
    "python.linting.enabled": true,
    "python.linting.pylintEnabled": false,
    "python.linting.flake8Enabled": true,
    "python.formatting.provider": "black",
    "python.testing.pytestEnabled": false,
    "python.testing.unittestEnabled": true,
    "files.associations": {
        "docker-compose*.yml": "dockercompose",
        "*.env*": "dotenv",
        "Dockerfile*": "dockerfile"
    },
    "files.exclude": {
        "**/__pycache__": true,
        "**/*.pyc": true,
        "**/offline_packages": true,
        "**/docker_images": true
    },
    "terminal.integrated.defaultProfile.windows": "PowerShell",
    "terminal.integrated.profiles.windows": {
        "PowerShell": {
            "source": "PowerShell",
            "icon": "terminal-powershell"
        },
        "Command Prompt": {
            "path": [
                "${env:windir}\\Sysnative\\cmd.exe",
                "${env:windir}\\System32\\cmd.exe"
            ],
            "args": [],
            "icon": "terminal-cmd"
        }
    },
    "workbench.colorCustomizations": {
        "terminal.background": "#1e1e1e",
        "terminal.foreground": "#d4d4d4"
    },
    "editor.rulers": [88],
    "editor.formatOnSave": true,
    "json.format.enable": true
}
'@

$settingsConfig | Out-File -FilePath (Join-Path $vscodeDir "settings.json") -Encoding UTF8

# –°–æ–∑–¥–∞–Ω–∏–µ extensions.json (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
Write-Host "üß© –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π..." -ForegroundColor Yellow

$extensionsConfig = @'
{
    "recommendations": [
        "ms-python.python",
        "ms-vscode.vscode-docker",
        "ms-vscode.powershell",
        "humao.rest-client",
        "redhat.vscode-yaml",
        "ms-python.flake8",
        "ms-python.black-formatter",
        "eamodio.gitlens",
        "streetsidesoftware.code-spell-checker",
        "ms-vscode.vscode-json",
        "mikestead.dotenv"
    ]
}
'@

$extensionsConfig | Out-File -FilePath (Join-Path $vscodeDir "extensions.json") -Encoding UTF8

# –°–æ–∑–¥–∞–Ω–∏–µ test.http —Ñ–∞–π–ª–∞ –¥–ª—è REST Client
Write-Host "üåê –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API..." -ForegroundColor Yellow

$httpTests = @'
### SMB3 File Processor API Tests
### –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ REST Client –¥–ª—è –∑–∞–ø—É—Å–∫–∞

### Health Check
GET http://localhost:3000/health
Content-Type: application/json

###

### Process Files
GET http://localhost:3000/process
Content-Type: application/json

###

### Health Check (–ø–æ–¥—Ä–æ–±–Ω—ã–π)
GET http://localhost:3000/health
Accept: application/json
User-Agent: VS Code REST Client

###

### Process Files (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
GET http://localhost:3000/process
Content-Type: application/json
Connection: keep-alive

###
'@

$httpTests | Out-File -FilePath "api_tests.http" -Encoding UTF8

# –°–æ–∑–¥–∞–Ω–∏–µ workspace —Ñ–∞–π–ª–∞
if ($CreateWorkspace) {
    Write-Host "üè¢ –°–æ–∑–¥–∞–Ω–∏–µ workspace —Ñ–∞–π–ª–∞..." -ForegroundColor Yellow
    
    $workspaceConfig = @'
{
    "folders": [
        {
            "name": "SMB3 File Processor",
            "path": "."
        }
    ],
    "settings": {
        "python.defaultInterpreterPath": "python",
        "terminal.integrated.defaultProfile.windows": "PowerShell"
    },
    "extensions": {
        "recommendations": [
            "ms-python.python",
            "ms-vscode.vscode-docker",
            "ms-vscode.powershell",
            "humao.rest-client"
        ]
    },
    "tasks": {
        "version": "2.0.0",
        "tasks": []
    }
}
'@
    
    $workspaceConfig | Out-File -FilePath "smb3-processor.code-workspace" -Encoding UTF8
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
if ($InstallExtensions) {
    Write-Host "üß© –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π..." -ForegroundColor Yellow
    
    $extensions = @(
        "ms-python.python",
        "ms-vscode.vscode-docker", 
        "ms-vscode.powershell",
        "humao.rest-client",
        "redhat.vscode-yaml",
        "mikestead.dotenv"
    )
    
    foreach ($extension in $extensions) {
        Write-Host "   –£—Å—Ç–∞–Ω–æ–≤–∫–∞ $extension..." -ForegroundColor Gray
        try {
            code --install-extension $extension --force
        }
        catch {
            Write-Host "   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å $extension" -ForegroundColor Yellow
        }
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞—Ç—á —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
Write-Host "üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞..." -ForegroundColor Yellow

# start_vscode.bat
$startVSCode = @'
@echo off
REM –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ VS Code —Å –ø—Ä–æ–µ–∫—Ç–æ–º SMB3 File Processor

echo üöÄ –ó–∞–ø—É—Å–∫ VS Code –¥–ª—è SMB3 File Processor
echo ==========================================

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ VS Code
where code >nul 2>nul
if errorlevel 1 (
    echo ‚ùå VS Code –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH!
    echo    –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–∑ –ø–∞–ø–∫–∏ VS Code –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ PATH
    pause
    exit /b
)

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
if not exist .env (
    echo üìã –°–æ–∑–¥–∞–Ω–∏–µ .env –∏–∑ —à–∞–±–ª–æ–Ω–∞...
    copy .env.example .env
    echo ‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SMB3 –≤ .env
)

REM –ó–∞–ø—É—Å–∫ VS Code
echo üéØ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ VS Code...
code .

echo ‚úÖ VS Code –∑–∞–ø—É—â–µ–Ω!
echo üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ VS Code:
echo    Ctrl + Shift + P - –ö–æ–º–∞–Ω–¥–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞
echo    Ctrl + Shift + ` - –ù–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª
echo    F5 - –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏
echo    Ctrl + R - –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
'@

$startVSCode | Out-File -FilePath "start_vscode.bat" -Encoding ASCII

# quick_test.bat
$quickTest = @'
@echo off
REM –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMB3 File Processor

echo üß™ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMB3 File Processor
echo ===========================================

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
python --version >nul 2>nul
if errorlevel 1 (
    echo ‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω!
    pause
    exit /b
)

REM –ü—Ä–æ–≤–µ—Ä–∫–∞ .env
if not exist .env (
    echo ‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!
    echo    –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ
    pause
    exit /b
)

REM –¢–µ—Å—Ç SMB3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
echo üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMB3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...
python test_smb3.py
if errorlevel 1 (
    echo ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMB3!
    pause
    exit /b
)

REM –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
echo üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...
start /b python app.py

REM –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
timeout /t 5 /nobreak >nul

REM Health check
echo üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint...
powershell -Command "try { $result = Invoke-RestMethod http://localhost:3000/health; Write-Host '‚úÖ Health check: OK' -ForegroundColor Green; $result } catch { Write-Host '‚ùå Health check failed' -ForegroundColor Red }"

echo üéâ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!
echo üåê –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞: http://localhost:3000
pause
'@

$quickTest | Out-File -FilePath "quick_test.bat" -Encoding ASCII

Write-Host ""
Write-Host "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VS Code –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" -ForegroundColor Green
Write-Host ""
Write-Host "üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:" -ForegroundColor Cyan
Write-Host "   .vscode/launch.json     - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏" -ForegroundColor White
Write-Host "   .vscode/tasks.json      - –ó–∞–¥–∞—á–∏ VS Code" -ForegroundColor White  
Write-Host "   .vscode/settings.json   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞" -ForegroundColor White
Write-Host "   .vscode/extensions.json - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è" -ForegroundColor White
Write-Host "   api_tests.http          - –¢–µ—Å—Ç—ã API –¥–ª—è REST Client" -ForegroundColor White
Write-Host "   start_vscode.bat        - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ VS Code" -ForegroundColor White
Write-Host "   quick_test.bat          - –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" -ForegroundColor White

if ($CreateWorkspace) {
    Write-Host "   smb3-processor.code-workspace - Workspace —Ñ–∞–π–ª" -ForegroundColor White
}

Write-Host ""
Write-Host "üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Yellow
Write-Host "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: start_vscode.bat" -ForegroundColor White
Write-Host "2. –í VS Code –Ω–∞–∂–º–∏—Ç–µ Ctrl + Shift + P" -ForegroundColor White
Write-Host "3. –í—ã–±–µ—Ä–∏—Ç–µ 'Extensions: Show Recommended Extensions'" -ForegroundColor White
Write-Host "4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è" -ForegroundColor White
Write-Host "5. –ù–∞–∂–º–∏—Ç–µ F5 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ª–∞–¥–∫–∏" -ForegroundColor White
Write-Host ""
Write-Host "üß© –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã VS Code:" -ForegroundColor Cyan
Write-Host "   F5                  - –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏" -ForegroundColor White
Write-Host "   Ctrl + Shift + P    - –ö–æ–º–∞–Ω–¥–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞" -ForegroundColor White
Write-Host "   Ctrl + Shift + `    - –ù–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª" -ForegroundColor White
Write-Host "   Ctrl + R            - –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏" -ForegroundColor White
